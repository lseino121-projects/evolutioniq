name: app-ci
on:
  push:
    branches: [ "main" ]   # only main for now
    paths:
      - 'apps/**'
      - 'charts/**'
      - '.github/workflows/app-ci.yml'
  workflow_dispatch: {}

permissions:
  contents: write
  id-token: write
  actions: write 
    
env:
  AWS_REGION: us-east-1
  ECR_REPO: demo

jobs:
  build-test-scan-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write     # OIDC
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backend unit tests
        working-directory: apps/backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pytest -q --maxfail=1 --disable-warnings -v

      - name: Frontend build
        working-directory: apps/frontend
        run: |
          npm install
          npm run build || echo "No build step, serving static index"

      - name: Compute next SemVer
        id: semver
        run: |
          cur=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          nxt=$(python3 scripts/release_bump.py $cur patch)
          echo "version=$nxt" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker images
        env:
          VERSION: ${{ steps.semver.outputs.version }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          FRONT=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO-frontend:$VERSION
          BACK=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO-backend:$VERSION

          docker build -t $FRONT apps/frontend
          docker push $FRONT

          docker build -t $BACK apps/backend
          docker push $BACK

          echo "FRONT=$FRONT" >> $GITHUB_ENV
          echo "BACK=$BACK" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Security scan (Trivy)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.BACK }}
          format: 'table'
          exit-code: '0'

      - name: Update Helm values + commit
        env:
          VERSION: ${{ steps.semver.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          sed -i.bak "s/tag: .*/tag: ${VERSION}/" charts/demo-stack/values.yaml && rm charts/demo-stack/values.yaml.bak

          git add charts/demo-stack/values.yaml
          git diff --cached --quiet || git commit -m "chore(release): bump chart tag to ${VERSION} [skip ci]"

          git tag ${VERSION}
          git push origin HEAD:main --tags



